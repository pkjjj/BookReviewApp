{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let ErrorHandlingService = /*#__PURE__*/(() => {\n  class ErrorHandlingService {\n    constructor(_router) {\n      this._router = _router;\n    }\n\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(error => {\n        let errorMessage = this.handleError(error);\n        return throwError(errorMessage);\n      }));\n    }\n\n    handleError(error) {\n      if (error.status === 404) {\n        return this.handleNotFound(error);\n      } else if (error.status === 400) {\n        return this.handleBadRequest(error);\n      } else if (error.status === 401) {\n        return this.handleUnauthorized(error);\n      }\n\n      return null;\n    }\n\n    handleUnauthorized(error) {\n      if (this._router.url === '/login') {\n        return 'Authenitcation failed. Wrong Username or Password';\n      } else {\n        this._router.navigate(['/login'], {\n          queryParams: {\n            returnUrl: this._router.url\n          }\n        });\n\n        return error.message;\n      }\n    }\n\n    handleNotFound(error) {\n      this._router.navigate(['/404']);\n\n      return error.message;\n    }\n\n    handleBadRequest(error) {\n      var _a;\n\n      if (this._router.url === '/registration') {\n        let message = '';\n        const values = Object.values(error.error.errors);\n        values.map(m => {\n          message += m + '<br>';\n        });\n        return message.slice(0, -4);\n      } else {\n        return (_a = error.error) !== null && _a !== void 0 ? _a : error.message;\n      }\n    }\n\n  }\n\n  ErrorHandlingService.ɵfac = function ErrorHandlingService_Factory(t) {\n    return new (t || ErrorHandlingService)(i0.ɵɵinject(i1.Router));\n  };\n\n  ErrorHandlingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorHandlingService,\n    factory: ErrorHandlingService.ɵfac,\n    providedIn: 'root'\n  });\n  return ErrorHandlingService;\n})();","map":null,"metadata":{},"sourceType":"module"}